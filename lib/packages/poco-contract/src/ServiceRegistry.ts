/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ServiceRegistry {
  export type RecordStruct = {
    endpoint: PromiseOrValue<string>;
    role: PromiseOrValue<BigNumberish>;
  };

  export type RecordStructOutput = [string, number] & {
    endpoint: string;
    role: number;
  };
}

export interface ServiceRegistryInterface extends utils.Interface {
  functions: {
    "initialize()": FunctionFragment;
    "setRecord((string,uint8))": FunctionFragment;
    "getRecord(address)": FunctionFragment;
    "getUsers()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "initialize"
      | "setRecord"
      | "getRecord"
      | "getUsers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord",
    values: [ServiceRegistry.RecordStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getUsers", values?: undefined): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRecord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRecord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUsers", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "NewService(uint8,address,string)": EventFragment;
    "ServiceUpdate(uint8,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewService"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceUpdate"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewServiceEventObject {
  role: number;
  provider: string;
  endpoint: string;
}
export type NewServiceEvent = TypedEvent<
  [number, string, string],
  NewServiceEventObject
>;

export type NewServiceEventFilter = TypedEventFilter<NewServiceEvent>;

export interface ServiceUpdateEventObject {
  role: number;
  provider: string;
  endpoint: string;
}
export type ServiceUpdateEvent = TypedEvent<
  [number, string, string],
  ServiceUpdateEventObject
>;

export type ServiceUpdateEventFilter = TypedEventFilter<ServiceUpdateEvent>;

export interface ServiceRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ServiceRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRecord(
      record: ServiceRegistry.RecordStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRecord(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ServiceRegistry.RecordStructOutput]>;

    getUsers(overrides?: CallOverrides): Promise<[string[]]>;
  };

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRecord(
    record: ServiceRegistry.RecordStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRecord(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ServiceRegistry.RecordStructOutput>;

  getUsers(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    initialize(overrides?: CallOverrides): Promise<void>;

    setRecord(
      record: ServiceRegistry.RecordStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getRecord(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ServiceRegistry.RecordStructOutput>;

    getUsers(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewService(uint8,address,string)"(
      role?: PromiseOrValue<BigNumberish> | null,
      provider?: PromiseOrValue<string> | null,
      endpoint?: null
    ): NewServiceEventFilter;
    NewService(
      role?: PromiseOrValue<BigNumberish> | null,
      provider?: PromiseOrValue<string> | null,
      endpoint?: null
    ): NewServiceEventFilter;

    "ServiceUpdate(uint8,address,string)"(
      role?: PromiseOrValue<BigNumberish> | null,
      provider?: PromiseOrValue<string> | null,
      endpoint?: null
    ): ServiceUpdateEventFilter;
    ServiceUpdate(
      role?: PromiseOrValue<BigNumberish> | null,
      provider?: PromiseOrValue<string> | null,
      endpoint?: null
    ): ServiceUpdateEventFilter;
  };

  estimateGas: {
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRecord(
      record: ServiceRegistry.RecordStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRecord(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsers(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRecord(
      record: ServiceRegistry.RecordStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRecord(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
