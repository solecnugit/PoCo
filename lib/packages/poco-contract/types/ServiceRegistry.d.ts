/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ServiceRegistryContract
  extends Truffle.Contract<ServiceRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ServiceRegistryInstance>;
}

export interface Initialized {
  name: "Initialized";
  args: {
    version: BN;
    0: BN;
  };
}

export interface NewService {
  name: "NewService";
  args: {
    role: BN;
    user: string;
    endpoint: string;
    0: BN;
    1: string;
    2: string;
  };
}

export interface ServiceUpdate {
  name: "ServiceUpdate";
  args: {
    role: BN;
    user: string;
    endpoint: string;
    0: BN;
    1: string;
    2: string;
  };
}

type AllEvents = Initialized | NewService | ServiceUpdate;

export interface ServiceRegistryInstance extends Truffle.ContractInstance {
  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setRecord: {
    (
      record: { endpoint: string; role: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      record: { endpoint: string; role: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      record: { endpoint: string; role: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      record: { endpoint: string; role: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getRecord(
    user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ endpoint: string; role: BN }>;

  getUsers(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  methods: {
    initialize: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setRecord: {
      (
        record: { endpoint: string; role: number | BN | string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        record: { endpoint: string; role: number | BN | string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        record: { endpoint: string; role: number | BN | string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        record: { endpoint: string; role: number | BN | string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getRecord(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ endpoint: string; role: BN }>;

    getUsers(txDetails?: Truffle.TransactionDetails): Promise<string[]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
